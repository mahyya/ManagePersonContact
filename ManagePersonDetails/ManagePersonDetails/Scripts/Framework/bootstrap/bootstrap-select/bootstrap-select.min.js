!function (a) { "use strict"; a.expr[":"].icontains = function (b, c, d) { if (a(b).text().toUpperCase().indexOf(d[3].toUpperCase()) == 0) { return a(b).text().toUpperCase().indexOf(d[3].toUpperCase()) >= 0 } }; var b = function (c, d, e) { e && (e.stopPropagation(), e.preventDefault()), this.$element = a(c), this.$newElement = null, this.$button = null, this.$menu = null, this.options = a.extend({}, a.fn.selectpicker.defaults, this.$element.data(), "object" == typeof d && d), null === this.options.title && (this.options.title = this.$element.attr("title")), this.val = b.prototype.val, this.render = b.prototype.render, this.refresh = b.prototype.refresh, this.setStyle = b.prototype.setStyle, this.selectAll = b.prototype.selectAll, this.deselectAll = b.prototype.deselectAll, this.init() }; b.prototype = { constructor: b, init: function () { this.$element.hide(), this.multiple = this.$element.prop("multiple"); var b = this.$element.attr("id"); if (this.$newElement = this.createView(), this.$element.after(this.$newElement), this.$menu = this.$newElement.find("> .dropdown-menu"), this.$button = this.$newElement.find("> button"), this.$searchbox = this.$newElement.find("input"), void 0 !== b) { var c = this; this.$button.attr("data-id", b), a('label[for="' + b + '"]').click(function (a) { a.preventDefault(), c.$button.focus() }) } this.checkDisabled(), this.clickListener(), this.options.liveSearch && this.liveSearchListener(), this.render(), this.liHeight(), this.setStyle(), this.setWidth(), this.options.container && this.selectPosition(), this.$menu.data("this", this), this.$newElement.data("this", this) }, createDropdown: function () { var b = this.multiple ? " show-tick" : "", c = this.options.header ? '<div class="popover-title"><button type="button" class="close" aria-hidden="true">&times;</button>' + this.options.header + "</div>" : "", d = this.options.liveSearch ? '<div class="bootstrap-select-searchbox"><input type="text" class="input-block-level form-control" /></div>' : "", e = '<div class="btn-group bootstrap-select' + b + '">' + '<button type="button" class="btn dropdown-toggle selectpicker" data-toggle="dropdown">' + '<span class="filter-option pull-left"></span>&nbsp;' + '<span class="caret"></span>' + "</button>" + '<div class="dropdown-menu open">' + c + d + '<ul class="dropdown-menu inner selectpicker" role="menu">' + "</ul>" + "</div>" + "</div>"; return a(e) }, createView: function () { var a = this.createDropdown(), b = this.createLi(); return a.find("ul").append(b), a }, reloadLi: function () { this.destroyLi(); var a = this.createLi(); this.$menu.find("ul").append(a) }, destroyLi: function () { this.$menu.find("li").remove() }, createLi: function () { var b = this, c = [], d = ""; return this.$element.find("option").each(function () { var d = a(this), e = d.attr("class") || "", f = d.attr("style") || "", g = d.data("content") ? d.data("content") : d.html(), h = void 0 !== d.data("subtext") ? '<small class="muted text-muted">' + d.data("subtext") + "</small>" : "", i = void 0 !== d.data("icon") ? '<i class="' + b.options.iconBase + " " + d.data("icon") + '"></i> ' : ""; if ("" !== i && (d.is(":disabled") || d.parent().is(":disabled")) && (i = "<span>" + i + "</span>"), d.data("content") || (g = i + '<span class="text">' + g + h + "</span>"), b.options.hideDisabled && (d.is(":disabled") || d.parent().is(":disabled"))) c.push('<a style="min-height: 0; padding: 0"></a>'); else if (d.parent().is("optgroup") && d.data("divider") !== !0) if (0 === d.index()) { var j = d.parent().attr("label"), k = void 0 !== d.parent().data("subtext") ? '<small class="muted text-muted">' + d.parent().data("subtext") + "</small>" : "", l = d.parent().data("icon") ? '<i class="' + d.parent().data("icon") + '"></i> ' : ""; j = l + '<span class="text">' + j + k + "</span>", 0 !== d[0].index ? c.push('<div class="div-contain"><div class="divider"></div></div><dt>' + j + "</dt>" + b.createA(g, "opt " + e, f)) : c.push("<dt>" + j + "</dt>" + b.createA(g, "opt " + e, f)) } else c.push(b.createA(g, "opt " + e, f)); else d.data("divider") === !0 ? c.push('<div class="div-contain"><div class="divider"></div></div>') : a(this).data("hidden") === !0 ? c.push("") : c.push(b.createA(g, e, f)) }), a.each(c, function (a, b) { d += "<li rel=" + a + ">" + b + "</li>" }), this.multiple || 0 !== this.$element.find("option:selected").length || this.options.title || this.$element.find("option").eq(0).prop("selected", !0).attr("selected", "selected"), a(d) }, createA: function (a, b, c) { return '<a tabindex="0" class="' + b + '" style="' + c + '">' + a + '<i class="' + this.options.iconBase + " " + this.options.tickIcon + ' fa fa-check check-mark"></i>' + "</a>" }, render: function () { var b = this; this.$element.find("option").each(function (c) { b.setDisabled(c, a(this).is(":disabled") || a(this).parent().is(":disabled")), b.setSelected(c, a(this).is(":selected")) }), this.tabIndex(); var c = this.$element.find("option:selected").map(function () { var e, c = a(this), d = c.data("icon") && b.options.showIcon ? '<i class="' + b.options.iconBase + " " + c.data("icon") + '"></i> ' : ""; return e = b.options.showSubtext && c.attr("data-subtext") && !b.multiple ? ' <small class="muted text-muted">' + c.data("subtext") + "</small>" : "", c.data("content") && b.options.showContent ? c.data("content") : void 0 !== c.attr("title") ? c.attr("title") : d + c.html() + e }).toArray(), d = this.multiple ? c.join(this.options.multipleSeparator) : c[0]; if (this.multiple && this.options.selectedTextFormat.indexOf("count") > -1) { var e = this.options.selectedTextFormat.split(">"), f = this.options.hideDisabled ? ":not([disabled])" : ""; (e.length > 1 && c.length > e[1] || 1 == e.length && c.length >= 2) && (d = this.options.countSelectedText.replace("{0}", c.length).replace("{1}", this.$element.find('option:not([data-divider="true"]):not([data-hidden="true"])' + f).length)) } d || (d = void 0 !== this.options.title ? this.options.title : this.options.noneSelectedText), this.$button.attr("title", a.trim(d)), this.$newElement.find(".filter-option").html(d) }, setStyle: function (a, b) { this.$element.attr("class") && this.$newElement.addClass(this.$element.attr("class").replace(/selectpicker|mobile-device/gi, "")); var c = a ? a : this.options.style; "add" == b ? this.$button.addClass(c) : "remove" == b ? this.$button.removeClass(c) : (this.$button.removeClass(this.options.style), this.$button.addClass(c)) }, liHeight: function () { var a = this.$menu.parent().clone().appendTo("body"), b = a.addClass("open").find("> .dropdown-menu"), c = b.find("li > a").outerHeight(), d = this.options.header ? b.find(".popover-title").outerHeight() : 0, e = this.options.liveSearch ? b.find(".bootstrap-select-searchbox").outerHeight() : 0; a.remove(), this.$newElement.data("liHeight", c).data("headerHeight", d).data("searchHeight", e) }, setSize: function () { var n, o, p, b = this, c = this.$menu, d = c.find(".inner"), e = this.$newElement.outerHeight(), f = this.$newElement.data("liHeight"), g = this.$newElement.data("headerHeight"), h = this.$newElement.data("searchHeight"), i = c.find("li .divider").outerHeight(!0), j = parseInt(c.css("padding-top")) + parseInt(c.css("padding-bottom")) + parseInt(c.css("border-top-width")) + parseInt(c.css("border-bottom-width")), k = this.options.hideDisabled ? ":not(.disabled)" : "", l = a(window), m = j + parseInt(c.css("margin-top")) + parseInt(c.css("margin-bottom")) + 2, q = function () { o = b.$newElement.offset().top - l.scrollTop(), p = l.height() - o - e }; if (q(), this.options.header && c.css("padding-top", 0), "auto" == this.options.size) { var r = function () { var a; q(), n = p - m, b.options.dropupAuto && b.$newElement.toggleClass("dropup", o > p && n - m < c.height()), b.$newElement.hasClass("dropup") && (n = o - m), a = c.find("li").length + c.find("dt").length > 3 ? 3 * f + m - 2 : 0, c.css({ "max-height": n + "px", overflow: "hidden", "min-height": a + "px" }), d.css({ "max-height": n - g - h - j + "px", "overflow-y": "auto", "min-height": a - j + "px" }) }; r(), a(window).resize(r), a(window).scroll(r) } else if (this.options.size && "auto" != this.options.size && c.find("li" + k).length > this.options.size) { var s = c.find("li" + k + " > *").filter(":not(.div-contain)").slice(0, this.options.size).last().parent().index(), t = c.find("li").slice(0, s + 1).find(".div-contain").length; n = f * this.options.size + t * i + j, b.options.dropupAuto && this.$newElement.toggleClass("dropup", o > p && n < c.height()), c.css({ "max-height": n + g + h + "px", overflow: "hidden" }), d.css({ "max-height": n - j + "px", "overflow-y": "auto" }) } }, setWidth: function () { if ("auto" == this.options.width) { this.$menu.css("min-width", "0"); var a = this.$newElement.clone().appendTo("body"), b = a.find("> .dropdown-menu").css("width"); a.remove(), this.$newElement.css("width", b) } else "fit" == this.options.width ? (this.$menu.css("min-width", ""), this.$newElement.css("width", "").addClass("fit-width")) : this.options.width ? (this.$menu.css("min-width", ""), this.$newElement.css("width", this.options.width)) : (this.$menu.css("min-width", ""), this.$newElement.css("width", "")); this.$newElement.hasClass("fit-width") && "fit" !== this.options.width && this.$newElement.removeClass("fit-width") }, selectPosition: function () { var e, f, b = this, c = "<div />", d = a(c), g = function (a) { d.addClass(a.attr("class")).toggleClass("dropup", a.hasClass("dropup")), e = a.offset(), f = a.hasClass("dropup") ? 0 : a[0].offsetHeight, d.css({ top: e.top + f, left: e.left, width: a[0].offsetWidth, position: "absolute" }) }; this.$newElement.on("click", function () { g(a(this)), d.appendTo(b.options.container), d.toggleClass("open", !a(this).hasClass("open")), d.append(b.$menu) }), a(window).resize(function () { g(b.$newElement) }), a(window).on("scroll", function () { g(b.$newElement) }), a("html").on("click", function (c) { a(c.target).closest(b.$newElement).length < 1 && d.removeClass("open") }) }, mobile: function () { this.$element.addClass("mobile-device").appendTo(this.$newElement), this.options.container && this.$menu.hide() }, refresh: function () { this.reloadLi(), this.render(), this.setWidth(), this.setStyle(), this.checkDisabled(), this.liHeight() }, update: function () { this.reloadLi(), this.setWidth(), this.setStyle(), this.checkDisabled(), this.liHeight() }, setSelected: function (a, b) { this.$menu.find("li").eq(a).toggleClass("selected", b) }, setDisabled: function (a, b) { b ? this.$menu.find("li").eq(a).addClass("disabled").find("a").attr("href", "#").attr("tabindex", -1) : this.$menu.find("li").eq(a).removeClass("disabled").find("a").removeAttr("href").attr("tabindex", 0) }, isDisabled: function () { return this.$element.is(":disabled") }, checkDisabled: function () { var a = this; this.isDisabled() ? this.$button.addClass("disabled").attr("tabindex", -1) : (this.$button.hasClass("disabled") && this.$button.removeClass("disabled"), -1 == this.$button.attr("tabindex") && (this.$element.data("tabindex") || this.$button.removeAttr("tabindex"))), this.$button.click(function () { return !a.isDisabled() }) }, tabIndex: function () { this.$element.is("[tabindex]") && (this.$element.data("tabindex", this.$element.attr("tabindex")), this.$button.attr("tabindex", this.$element.data("tabindex"))) }, clickListener: function () { var b = this; a("body").on("touchstart.dropdown", ".dropdown-menu", function (a) { a.stopPropagation() }), this.$newElement.on("click", function () { b.setSize(), b.options.liveSearch || b.multiple || setTimeout(function () { b.$menu.find(".selected a").focus() }, 10) }), this.$menu.on("click", "li a", function (c) { var d = a(this).parent().index(), e = b.$element.val(), f = b.$element.prop("selectedIndex"); if (b.multiple && c.stopPropagation(), c.preventDefault(), !b.isDisabled() && !a(this).parent().hasClass("disabled")) { var g = b.$element.find("option"), h = g.eq(d); if (b.multiple) { var i = h.prop("selected"); h.prop("selected", !i) } else g.prop("selected", !1), h.prop("selected", !0); b.multiple ? b.options.liveSearch && b.$searchbox.focus() : b.$button.focus(), (e != b.$element.val() && b.multiple || f != b.$element.prop("selectedIndex") && !b.multiple) && b.$element.change() } }), this.$menu.on("click", "li.disabled a, li dt, li .div-contain, .popover-title, .popover-title :not(.close)", function (a) { a.target == this && (a.preventDefault(), a.stopPropagation(), b.options.liveSearch ? b.$searchbox.focus() : b.$button.focus()) }), this.$menu.on("click", ".popover-title .close", function () { b.$button.focus() }), this.$searchbox.on("click", function (a) { a.stopPropagation() }), this.$element.change(function () { b.render() }) }, liveSearchListener: function () { var b = this, c = a('<li class="no-results"></li>'); this.$newElement.on("click.dropdown.data-api", function () { b.$menu.find(".active").removeClass("active"), b.$searchbox.val() && (b.$searchbox.val(""), b.$menu.find("li").show(), c.parent().length && c.remove()), b.multiple || b.$menu.find(".selected").addClass("active"), setTimeout(function () { b.$searchbox.focus() }, 10) }), this.$searchbox.on("input propertychange", function () { b.$searchbox.val() ? (b.$menu.find("li").show().not(":icontains(" + b.$searchbox.val() + ")").hide(), b.$menu.find("li").filter(":visible:not(.no-results)").length ? c.parent().length && c.remove() : (c.parent().length && c.remove(), c.html('No results match "' + b.$searchbox.val() + '"').show(), b.$menu.find("li").last().after(c))) : (b.$menu.find("li").show(), c.parent().length && c.remove()), b.$menu.find("li.active").removeClass("active"), b.$menu.find("li").filter(":visible:not(.divider)").eq(0).addClass("active").find("a").focus(), a(this).focus() }), this.$menu.on("mouseenter", "a", function (c) { b.$menu.find(".active").removeClass("active"), a(c.currentTarget).parent().not(".disabled").addClass("active") }), this.$menu.on("mouseleave", "a", function () { b.$menu.find(".active").removeClass("active") }) }, val: function (a) { return void 0 !== a ? (this.$element.val(a), this.$element.change(), this.$element) : this.$element.val() }, selectAll: function () { this.$element.find("option").prop("selected", !0).attr("selected", "selected"), this.render() }, deselectAll: function () { this.$element.find("option").prop("selected", !1).removeAttr("selected"), this.render() }, keydown: function (b) { var c, d, e, f, g, h, i, j, k, l, m, n, o = { 32: " ", 48: "0", 49: "1", 50: "2", 51: "3", 52: "4", 53: "5", 54: "6", 55: "7", 56: "8", 57: "9", 59: ";", 65: "a", 66: "b", 67: "c", 68: "d", 69: "e", 70: "f", 71: "g", 72: "h", 73: "i", 74: "j", 75: "k", 76: "l", 77: "m", 78: "n", 79: "o", 80: "p", 81: "q", 82: "r", 83: "s", 84: "t", 85: "u", 86: "v", 87: "w", 88: "x", 89: "y", 90: "z", 96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7", 104: "8", 105: "9" }; if (c = a(this), e = c.parent(), c.is("input") && (e = c.parent().parent()), l = e.data("this"), l.options.liveSearch && (e = c.parent().parent()), l.options.container && (e = l.$menu), d = a("[role=menu] li:not(.divider) a", e), n = l.$menu.parent().hasClass("open"), l.options.liveSearch && (/(^9$|27)/.test(b.keyCode) && n && 0 === l.$menu.find(".active").length && (b.preventDefault(), l.$menu.parent().removeClass("open"), l.$button.focus()), d = a("[role=menu] li:not(.divider):visible", e), c.val() || /(38|40)/.test(b.keyCode) || 0 === d.filter(".active").length && (d = l.$newElement.find("li").filter(":icontains(" + o[b.keyCode] + ")"))), d.length) { if (/(38|40)/.test(b.keyCode)) n || l.$menu.parent().addClass("open"), f = d.index(d.filter(":focus")), h = d.parent(":not(.disabled):visible").first().index(), i = d.parent(":not(.disabled):visible").last().index(), g = d.eq(f).parent().nextAll(":not(.disabled):visible").eq(0).index(), j = d.eq(f).parent().prevAll(":not(.disabled):visible").eq(0).index(), k = d.eq(g).parent().prevAll(":not(.disabled):visible").eq(0).index(), l.options.liveSearch && (d.each(function (b) { a(this).is(":not(.disabled)") && a(this).data("index", b) }), f = d.index(d.filter(".active")), h = d.filter(":not(.disabled):visible").first().data("index"), i = d.filter(":not(.disabled):visible").last().data("index"), g = d.eq(f).nextAll(":not(.disabled):visible").eq(0).data("index"), j = d.eq(f).prevAll(":not(.disabled):visible").eq(0).data("index"), k = d.eq(g).prevAll(":not(.disabled):visible").eq(0).data("index")), m = c.data("prevIndex"), 38 == b.keyCode && (l.options.liveSearch && (f -= 1), f != k && f > j && (f = j), h > f && (f = h), f == m && (f = i)), 40 == b.keyCode && (l.options.liveSearch && (f += 1), -1 == f && (f = 0), f != k && g > f && (f = g), f > i && (f = i), f == m && (f = h)), c.data("prevIndex", f), l.options.liveSearch ? (b.preventDefault(), c.is(".dropdown-toggle") || (d.removeClass("active"), d.eq(f).addClass("active").find("a").focus(), c.focus())) : d.eq(f).focus(); else if (!c.is("input")) { var q, r, p = []; d.each(function () { a(this).parent().is(":not(.disabled)") && a.trim(a(this).text().toLowerCase()).substring(0, 1) == o[b.keyCode] && p.push(a(this).parent().index()) }), q = a(document).data("keycount"), q++, a(document).data("keycount", q), r = a.trim(a(":focus").text().toLowerCase()).substring(0, 1), r != o[b.keyCode] ? (q = 1, a(document).data("keycount", q)) : q >= p.length && (a(document).data("keycount", 0), q > p.length && (q = 1)), d.eq(p[q - 1]).focus() } /(13|32|^9$) /.test(b.keyCode) && n && (/(32)/.test(b.keyCode) || b.preventDefault(), l.options.liveSearch ? /(32)/.test(b.keyCode) || (l.$menu.find(".active a").click(), c.focus()) : a(":focus").click(), a(document).data("keycount", 0)), (/(^9$|27)/.test(b.keyCode) && n && (l.multiple || l.options.liveSearch) || /(27)/.test(b.keyCode) && !n) && (l.$menu.parent().removeClass("open"), l.$button.focus()) } }, hide: function () { this.$newElement.hide() }, show: function () { this.$newElement.show() }, destroy: function () { this.$newElement.remove(), this.$element.remove() } }, a.fn.selectpicker = function (c, d) { var f, e = arguments, g = this.each(function () { if (a(this).is("select")) { var g = a(this), h = g.data("selectpicker"), i = "object" == typeof c && c; if (h) { if (i) for (var j in i) h.options[j] = i[j] } else g.data("selectpicker", h = new b(this, i, d)); if ("string" == typeof c) { var k = c; h[k] instanceof Function ? ([].shift.apply(e), f = h[k].apply(h, e)) : f = h.options[k] } } }); return void 0 !== f ? f : g }, a.fn.selectpicker.defaults = { style: "btn-default", size: "auto", title: null, selectedTextFormat: "values", noneSelectedText: "-- Select --", countSelectedText: "{0} of {1} selected", width: !1, container: !1, hideDisabled: !1, showSubtext: !1, showIcon: !0, showContent: !0, dropupAuto: !0, header: !1, liveSearch: !1, multipleSeparator: ", ", iconBase: "fa", tickIcon: "fa-check" }, a(document).data("keycount", 0).on("keydown", ".bootstrap-select [data-toggle=dropdown], .bootstrap-select [role=menu], .bootstrap-select-searchbox input", b.prototype.keydown).on("focusin.modal", ".bootstrap-select [data-toggle=dropdown], .bootstrap-select [role=menu], .bootstrap-select-searchbox input", function (a) { a.stopPropagation() }) }(window.jQuery);